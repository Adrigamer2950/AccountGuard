//file:noinspection VulnerableLibrariesLocal
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'me.adrigamer2950.accountguard'
version = parent.version
description = parent.description
author = parent.author

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "AlessioDP"
        url = "https://repo.alessiodp.com/releases/"
    }
}

dependencies {
    // Velocity API
    compileOnly "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"
    annotationProcessor "com.velocitypowered:velocity-api:3.3.0-SNAPSHOT"

    // Common
    implementation project(':common')

    // API
    implementation project(':api')

    // Boosted YAML
    compileOnly 'dev.dejvokep:boosted-yaml:1.3.7'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    // Libby
    implementation "net.byteflux:libby-velocity:1.3.1"

    // bStats
    implementation 'org.bstats:bstats-velocity:3.1.0'
}

def targetJavaVersion = 17

tasks {
    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
    }

    compileJava {
        options.encoding = 'UTF-8'

        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            options.release.set(targetJavaVersion)
        }
    }

    jar {
        archiveBaseName.set('AccountGuard')
        archiveClassifier.set('Velocity')
        //noinspection GroovyAssignabilityCheck
        archiveVersion.set(version)
    }

    shadowJar {
        archiveBaseName.set('AccountGuard')
        archiveClassifier.set('Velocity')

        dependencies {
            relocate "net.byteflux.libby", "me.adrigamer2950.accountguard.libs.libby"

            relocate "dev.dejvokep.boostedyaml", "me.adrigamer2950.accountguard.libs.boosted-yaml"

            relocate "org.bstats", "me.adrigamer2950.accountguard.util.bstats"
        }
    }

    tasks.shadowJar.doLast {
        copy {
            from "./build/libs/"
            into "../build/"
            include "*.jar"
        }
    }

    tasks.build.finalizedBy(shadowJar)

    tasks.register("wrapper") {}

    tasks.register("prepareKotlinBuildScriptModel") {}
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': parent.version,
            'description': parent.description,
            'author': parent.author
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })
