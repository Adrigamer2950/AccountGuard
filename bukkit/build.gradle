//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'me.adrigamer2950.accountguard'
version = parent.version
description = parent.description
author = parent.author

repositories {
    mavenCentral()
    maven {
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        url = "https://repo.devadri.es/repository/releases"
    }
    maven {
        name = "AlessioDP"
        url = "https://repo.alessiodp.com/releases/"
    }
}

dependencies {
    // Paper API
    //noinspection VulnerableLibrariesLocal
    compileOnly "io.papermc.paper:paper-api:1.19.4-R0.1-SNAPSHOT"

    // AdriAPI
    compileOnly 'me.adrigamer2950:AdriAPI:2.0.1'

    // Common
    implementation project(':common')

    // API
    implementation project(':api')

    // Boosted Yaml
    compileOnly 'dev.dejvokep:boosted-yaml:1.3.7'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    // Libby
    implementation "net.byteflux:libby-bukkit:1.3.1"
}

def targetJavaVersion = 17

tasks {
    tasks.withType(JavaCompile).configureEach {
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            options.release = targetJavaVersion
            options.encoding = 'UTF-8'
        }
    }

    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
    }

    processResources {
        def props = [
                version: this.version,
                description: this.description,
                author: this.author
        ]
        inputs.properties props
        filteringCharset 'UTF-8'
        filesMatching('plugin.yml') {
            expand props
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    tasks.build.finalizedBy(shadowJar)

    jar {
        archiveBaseName.set('AccountGuard')
        archiveClassifier.set('Bukkit')
        //noinspection GroovyAssignabilityCheck
        archiveVersion.set(version)
    }

    shadowJar {
        archiveBaseName.set('AccountGuard')
        archiveClassifier.set('Bukkit')

        dependencies {
            relocate "net.byteflux.libby", "me.adrigamer2950.accountguard.libs.libby"

            relocate "dev.dejvokep.boostedyaml", "me.adrigamer2950.accountguard.libs.boosted-yaml"
        }
    }

    tasks.shadowJar.doLast {
        copy {
            from "./build/libs/"
            into "../build/"
            include "*.jar"
        }
    }
}

tasks.register('prepareKotlinBuildScriptModel') {}
